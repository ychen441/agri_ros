// Generated by gencpp from file conti_ars408_side1/radar_object_info.msg
// DO NOT EDIT!


#ifndef CONTI_ARS408_SIDE1_MESSAGE_RADAR_OBJECT_INFO_H
#define CONTI_ARS408_SIDE1_MESSAGE_RADAR_OBJECT_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/TwistWithCovariance.h>
#include <geometry_msgs/AccelWithCovariance.h>

namespace conti_ars408_side1
{
template <class ContainerAllocator>
struct radar_object_info_
{
  typedef radar_object_info_<ContainerAllocator> Type;

  radar_object_info_()
    : ObjectID(0)
    , ObjectPosn()
    , ObjectVrel()
    , ObjectArel()
    , ObjectDynProp(0)
    , ObjectRCS(0.0)
    , ObjectMeasState(0)
    , ObjectProbOfExist(0)
    , ObjectClass(0)
    , ObjectOrientationAngle(0.0)
    , ObjectLength(0.0)
    , ObjectWidth(0.0)  {
    }
  radar_object_info_(const ContainerAllocator& _alloc)
    : ObjectID(0)
    , ObjectPosn(_alloc)
    , ObjectVrel(_alloc)
    , ObjectArel(_alloc)
    , ObjectDynProp(0)
    , ObjectRCS(0.0)
    , ObjectMeasState(0)
    , ObjectProbOfExist(0)
    , ObjectClass(0)
    , ObjectOrientationAngle(0.0)
    , ObjectLength(0.0)
    , ObjectWidth(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _ObjectID_type;
  _ObjectID_type ObjectID;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _ObjectPosn_type;
  _ObjectPosn_type ObjectPosn;

   typedef  ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  _ObjectVrel_type;
  _ObjectVrel_type ObjectVrel;

   typedef  ::geometry_msgs::AccelWithCovariance_<ContainerAllocator>  _ObjectArel_type;
  _ObjectArel_type ObjectArel;

   typedef int8_t _ObjectDynProp_type;
  _ObjectDynProp_type ObjectDynProp;

   typedef float _ObjectRCS_type;
  _ObjectRCS_type ObjectRCS;

   typedef int8_t _ObjectMeasState_type;
  _ObjectMeasState_type ObjectMeasState;

   typedef int8_t _ObjectProbOfExist_type;
  _ObjectProbOfExist_type ObjectProbOfExist;

   typedef int8_t _ObjectClass_type;
  _ObjectClass_type ObjectClass;

   typedef float _ObjectOrientationAngle_type;
  _ObjectOrientationAngle_type ObjectOrientationAngle;

   typedef float _ObjectLength_type;
  _ObjectLength_type ObjectLength;

   typedef float _ObjectWidth_type;
  _ObjectWidth_type ObjectWidth;





  typedef boost::shared_ptr< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> const> ConstPtr;

}; // struct radar_object_info_

typedef ::conti_ars408_side1::radar_object_info_<std::allocator<void> > radar_object_info;

typedef boost::shared_ptr< ::conti_ars408_side1::radar_object_info > radar_object_infoPtr;
typedef boost::shared_ptr< ::conti_ars408_side1::radar_object_info const> radar_object_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::conti_ars408_side1::radar_object_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::conti_ars408_side1::radar_object_info_<ContainerAllocator1> & lhs, const ::conti_ars408_side1::radar_object_info_<ContainerAllocator2> & rhs)
{
  return lhs.ObjectID == rhs.ObjectID &&
    lhs.ObjectPosn == rhs.ObjectPosn &&
    lhs.ObjectVrel == rhs.ObjectVrel &&
    lhs.ObjectArel == rhs.ObjectArel &&
    lhs.ObjectDynProp == rhs.ObjectDynProp &&
    lhs.ObjectRCS == rhs.ObjectRCS &&
    lhs.ObjectMeasState == rhs.ObjectMeasState &&
    lhs.ObjectProbOfExist == rhs.ObjectProbOfExist &&
    lhs.ObjectClass == rhs.ObjectClass &&
    lhs.ObjectOrientationAngle == rhs.ObjectOrientationAngle &&
    lhs.ObjectLength == rhs.ObjectLength &&
    lhs.ObjectWidth == rhs.ObjectWidth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::conti_ars408_side1::radar_object_info_<ContainerAllocator1> & lhs, const ::conti_ars408_side1::radar_object_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace conti_ars408_side1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "599a292f7c5e980e99c41704cbfb8d14";
  }

  static const char* value(const ::conti_ars408_side1::radar_object_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x599a292f7c5e980eULL;
  static const uint64_t static_value2 = 0x99c41704cbfb8d14ULL;
};

template<class ContainerAllocator>
struct DataType< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "conti_ars408_side1/radar_object_info";
  }

  static const char* value(const ::conti_ars408_side1::radar_object_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Object (0x60A, 0x60B, 0x60C, 0x60D)\n"
"\n"
"uint8 ObjectID\n"
"geometry_msgs/PoseWithCovariance ObjectPosn\n"
"geometry_msgs/TwistWithCovariance ObjectVrel\n"
"geometry_msgs/AccelWithCovariance ObjectArel\n"
"int8 ObjectDynProp\n"
"float32 ObjectRCS\n"
"int8 ObjectMeasState\n"
"int8 ObjectProbOfExist\n"
"int8 ObjectClass\n"
"float32 ObjectOrientationAngle\n"
"float32 ObjectLength\n"
"float32 ObjectWidth\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/AccelWithCovariance\n"
"# This expresses acceleration in free space with uncertainty.\n"
"\n"
"Accel accel\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::conti_ars408_side1::radar_object_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ObjectID);
      stream.next(m.ObjectPosn);
      stream.next(m.ObjectVrel);
      stream.next(m.ObjectArel);
      stream.next(m.ObjectDynProp);
      stream.next(m.ObjectRCS);
      stream.next(m.ObjectMeasState);
      stream.next(m.ObjectProbOfExist);
      stream.next(m.ObjectClass);
      stream.next(m.ObjectOrientationAngle);
      stream.next(m.ObjectLength);
      stream.next(m.ObjectWidth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_object_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::conti_ars408_side1::radar_object_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::conti_ars408_side1::radar_object_info_<ContainerAllocator>& v)
  {
    s << indent << "ObjectID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ObjectID);
    s << indent << "ObjectPosn: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.ObjectPosn);
    s << indent << "ObjectVrel: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.ObjectVrel);
    s << indent << "ObjectArel: ";
    s << std::endl;
    Printer< ::geometry_msgs::AccelWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.ObjectArel);
    s << indent << "ObjectDynProp: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ObjectDynProp);
    s << indent << "ObjectRCS: ";
    Printer<float>::stream(s, indent + "  ", v.ObjectRCS);
    s << indent << "ObjectMeasState: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ObjectMeasState);
    s << indent << "ObjectProbOfExist: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ObjectProbOfExist);
    s << indent << "ObjectClass: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ObjectClass);
    s << indent << "ObjectOrientationAngle: ";
    Printer<float>::stream(s, indent + "  ", v.ObjectOrientationAngle);
    s << indent << "ObjectLength: ";
    Printer<float>::stream(s, indent + "  ", v.ObjectLength);
    s << indent << "ObjectWidth: ";
    Printer<float>::stream(s, indent + "  ", v.ObjectWidth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTI_ARS408_SIDE1_MESSAGE_RADAR_OBJECT_INFO_H
